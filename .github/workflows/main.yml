# There is a fair bit of duplication here, but it is the best to save our github free minutes for now.
# We could save and restore cache to different jobs but that takes roughly 3 minutes to save,
# so better run them in parrallel instead.

name: Session iOS

on:
  push:
    branches:
      - master
      - dev
      - 'release/**'
  pull_request:
    branches:
      - master
      - dev
      - 'release/**'

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  build_and_test:
    runs-on: macos-14
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      DERIVED_DATA_PATH: ./build/derivedData
      BUILD_CONFIGURATION: "App_Store_Release"

    steps:
      - name: Set Xcode version
        run: sudo xcode-select -s /Applications/Xcode_16.2.app

      - name: Install Build Tools (If Missing)
        run: |
          if ! command -v xcbeautify &> /dev/null; then
            brew install xcbeautify
          fi

          if ! command -v xcresultparser &> /dev/null; then
            brew install xcresultparser
          fi

      - name: Version Information
        run: |
          git --version
          xcodebuild -version
          echo "xcbeautify: $(xcbeautify --version)"
          echo "xcresultparser: $(xcresultparser --version)"

      - name: Checkout git repo
        uses: actions/checkout@v4

      - name: Cache Swift Packages
        uses: actions/cache@v4
        with:
          path: ${{ env.DERIVED_DATA_PATH }}/SourcePackages
          key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-spm-

      - name: Build and Run Tests
        run: |
          NSUnbufferedIO=YES set -o pipefail && \
          xcodebuild \
            -project Session.xcodeproj \
            -scheme Session \
            -derivedDataPath ${{ env.DERIVED_DATA_PATH }} \
            -resultBundlePath ./build/artifacts/testResults.xcresult \
            -parallelizeTargets \
            -configuration "${{ env.BUILD_CONFIGURATION }}" \
            -sdk iphonesimulator \
            -destination "platform=iOS Simulator,name=iPhone 16,OS=latest" \
            -parallel-testing-enabled NO \
            -test-timeouts-enabled YES \
            -maximum-test-execution-time-allowance 10 \
            -collect-test-diagnostics never \
            test \
            ENABLE_TESTABILITY=YES \
            CODE_SIGN_IDENTITY="" \
            DEVELOPMENT_TEAM="" \
            CODE_SIGNING_REQUIRED=NO \
          | xcbeautify --renderer github-actions --is-ci

      - name: Parse Tests
        id: parse_tests
        if: always() && steps.build_test.outcome != 'skipped'
        run: |
          TOTAL_TESTS=0
          FAILED_TESTS=0
          PASSED_TESTS=0

          if [ -d "$XCRESULT_PATH" ]; then
            echo "Parsing $XCRESULT_PATH using xcresultparser cli output..."
            CLI_OUTPUT=$(xcresultparser --output-format cli --input "./build/artifacts/testResults.xcresult")

            if [ -z "$CLI_OUTPUT" ]; then
               echo "Warning: xcresultparser produced empty CLI output."
            else
               TEMP_TOTAL=$(echo "$CLI_OUTPUT" | grep "Number of tests =" | awk '{print $NF}')
               TEMP_FAILED=$(echo "$CLI_OUTPUT" | grep "Number of failed tests =" | awk '{print $NF}')
                TOTAL_TESTS=${TEMP_TOTAL:-0}
               FAILED_TESTS=${TEMP_FAILED:-0}

               [[ "$TOTAL_TESTS" =~ ^[0-9]+$ ]] || TOTAL_TESTS=0
               [[ "$FAILED_TESTS" =~ ^[0-9]+$ ]] || FAILED_TESTS=0

               PASSED_TESTS=$((TOTAL_TESTS - FAILED_TESTS))
               if (( PASSED_TESTS < 0 )); then PASSED_TESTS=0; fi

               echo "Test Counts - Total: ${TOTAL_TESTS}, Failed: ${FAILED_TESTS}, Passed: ${PASSED_TESTS}"
            fi
          else
            echo "xcresult bundle not found. Setting counts to 0."
          fi

          echo "total=${TOTAL_TESTS}" >> $GITHUB_OUTPUT
          echo "failed=${FAILED_TESTS}" >> $GITHUB_OUTPUT
          echo "passed=${PASSED_TESTS}" >> $GITHUB_OUTPUT

      - name: Upload Simulator App Bundle
        uses: actions/upload-artifact@v4
        with:
          name: session-ios-simulator
          path: ${{ env.DERIVED_DATA_PATH }}/Build/Products/${{ env.BUILD_CONFIGURATION }}-iphonesimulator/Session.app

      - name: Update Build Artifact Check Run Status
        if: always() && github.event_name == 'pull_request' # Always run, but only for PRs
        uses: actions/github-script@v7
        env:
            BUILD_CHECK_NAME_INPUT: ${{ env.BUILD_CHECK_NAME }} # Read job env var here
            BUILD_TEST_OUTCOME_INPUT: ${{ steps.build_test.outcome }}
            UPLOAD_OUTCOME_INPUT: ${{ steps.upload_artifact.outcome || 'skipped' }}
            ARTIFACT_URL_INPUT: ${{ steps.upload_artifact.outputs.artifact-url }}
            HEAD_SHA_INPUT: ${{ steps.pr_sha.outputs.sha || github.sha }}
            RUN_ID_INPUT: ${{ github.run_id }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const updateCheck = require('./.github/scripts/update-build-check.js');

            const checkName = process.env.BUILD_CHECK_NAME_INPUT;
            const buildTestOutcome = process.env.BUILD_TEST_OUTCOME_INPUT;
            const uploadOutcome = process.env.UPLOAD_OUTCOME_INPUT;
            const artifactUrl = process.env.ARTIFACT_URL_INPUT;
            const headSha = process.env.HEAD_SHA_INPUT;
            const runId = process.env.RUN_ID_INPUT;

            if (!checkName) {
              core.setFailed('Error: BUILD_CHECK_NAME_INPUT was not correctly passed to the script.');
              return;
            }
            if (!headSha) {
              core.setFailed('Error: HEAD_SHA_INPUT was not correctly passed to the script.');
              return;
            }

            await updateCheck({
              github: github,
              context: context,
              buildTestOutcome: buildTestOutcome,
              uploadOutcome: uploadOutcome,
              artifactUrl: artifactUrl,
              checkName: checkName,
              headSha: headSha,
              runId: runId
            });

      - name: Unit Tests
        if: always() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        env:
            FAILED_TESTS: ${{ steps.parse_tests.outputs.failed }}
            PASSED_TESTS: ${{ steps.parse_tests.outputs.passed }}
            TOTAL_TESTS: ${{ steps.parse_tests.outputs.total }}
            HEAD_SHA_INPUT: ${{ steps.pr_sha.outputs.sha || github.sha }}
            RUN_ID_INPUT: ${{ github.run_id }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // This JavaScript part remains the same as the previous version
            const checkName = "Unit Tests"; // Static check name
            const failed = parseInt(process.env.FAILED_TESTS || '0');
            const passed = parseInt(process.env.PASSED_TESTS || '0');
            const total = parseInt(process.env.TOTAL_TESTS || '0');
            const headSha = process.env.HEAD_SHA_INPUT;
            const runId = process.env.RUN_ID_INPUT;
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const runUrl = `${process.env.GITHUB_SERVER_URL}/${owner}/${repo}/actions/runs/${runId}`;

            let conclusion;
            let summary;

            // Determine conclusion and format the summary string
            if (failed > 0) {
              conclusion = 'failure';
              summary = `❌ ${failed} failed, ${passed} passed (${total} total)`;
            } else if (total > 0) {
              conclusion = 'success';
              summary = `✅ ${passed} tests passed (${total} total)`;
            } else {
               conclusion = 'neutral';
               summary = `❓ No test results found or 0 tests run.`;
            }

            summary += `\n\n[View Full Workflow Run Details](${runUrl})`;

            // Basic validation
            if (!headSha) {
              core.setFailed('Error: HEAD_SHA_INPUT was not correctly passed.');
              return;
            }

            await github.rest.checks.create({
              owner: owner,
              repo: repo,
              name: "Unit Tests",
              head_sha: headSha,
              status: 'completed',
              conclusion: conclusion,
              completed_at: new Date().toISOString(),
              output: summary,
              details_url: runUrl
            });
